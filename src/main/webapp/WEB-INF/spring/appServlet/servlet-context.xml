<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"	
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- transactionManager -->
	<tx:annotation-driven  transaction-manager="transactionManager" />	
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/html/**" location="/resources/html/" />
	<resources mapping="/style/**" location="/resources/style/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/ppt/**" location="/resources/ppt/" />
	<resources mapping="/repository/**" location="/resources/repository/" />
	<resources mapping="/upimage/**" location="/resources/upimage/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- file upload -->
	<beans:bean  id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- max upload size in bytes -->
		<beans:property name="maxUploadSize" value="5242880" /> <!-- 5MB 1024*1024*5-->
		<!-- max size of file in memory (in bytes) -->
		<beans:property name="maxInMemorySize" value="1048576" /> <!-- 1MB -->		
	</beans:bean>
	
	<!-- spring에서 제공하는 dataSource bean을 정의 -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" /> 
		<beans:property name="username" value="scott" />
		<beans:property name="password" value="tiger" />
	</beans:bean>
	
	<!-- dataSource bean을 멤버필드로 사용하는 JdbcTemplate bean정의 -->
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- transactionManager처리 -->
	<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
		
	<!-- transactionTemplate추가(transactionmanager를 속성으로 가지고 있음 -->
	<beans:bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<beans:property name="transactionManager" ref="transactionManager"></beans:property>
	</beans:bean>
	
	<!-- mybatis처리를 위한 클래스 객체  -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="mapperLocations" value="classpath:com/lee/test/dao/mapper/*.xml">
		</beans:property>
	</beans:bean>
	
	<!-- sql처리에 필요한 모든 메서드를 가지고 있는 객체 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0"  ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
			
	<!-- mybatis로 처리하는 dao클래스 빈 -->	
	<beans:bean name="mdao" class="com.lee.test.dao.MemberDao"></beans:bean>
	<beans:bean name="pdao" class="com.lee.test.dao.ProjectDao"></beans:bean>
	
	<!-- 암호화 bean -->
	<beans:bean name="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> 
		
	<context:component-scan base-package="com.lee.test" />

</beans:beans>
